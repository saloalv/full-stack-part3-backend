{"version":3,"sources":["components/Person.js","components/PersonTable.js","components/FilteredPersonTable.js","components/AddPersonForm.js","components/FilterFragment.js","services/Phonebook.js","components/Notification.js","App.js","index.js"],"names":["Person","_ref","name","number","id","removePerson","react_default","a","createElement","onClick","PersonTable","persons","map","_ref2","components_Person","key","FilteredPersonTable","filter","components_PersonTable","toUpperCase","includes","AddPersonForm","nameGet","nameSet","numberGet","numberSet","addName","onSubmit","value","onChange","event","target","type","FilterFragment","currentFilter","setFilter","baseURL","Phonebook","Axios","get","then","response","data","newPerson","post","put","concat","delete","Notification","text","undefined","className","App","_useState","useState","_useState2","Object","slicedToArray","setPersons","_useState3","_useState4","newName","setNewName","_useState5","_useState6","newNumber","setNewNumber","_useState7","_useState8","_useState9","_useState10","notification","setNotification","loadFromDatabase","API","receivedPersons","useEffect","notify","console","log","setTimeout","getPersonByName","result","find","p","components_Notification","components_FilterFragment","components_AddPersonForm","preventDefault","some","person","window","confirm","objectSpread","catch","length","components_FilteredPersonTable","personToRemove","getPersonById","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.92604428.chunk.js","sourcesContent":["import React from 'react';\n\nconst Person = ({name, number, id, removePerson}) => {\n\n    return (\n        <tr>\n            <td>{name}</td>\n            <td>{number}</td>\n            <td><button onClick={() => removePerson(id)}>delete</button></td>\n        </tr>\n    )\n}\n\nexport default Person","import React from 'react'\nimport Person from './Person'\n\nconst PersonTable = ({persons, removePerson}) => {\n  return (\n    <table>\n      <tbody>\n        {persons.map(({ name, number, id }) =>\n         <Person name={name} number={number} id={id} removePerson={removePerson} key={name} />)}\n      </tbody>\n    </table>\n  )\n}\n\nexport default PersonTable","import React from 'react'\nimport PersonTable from './PersonTable'\n\nconst FilteredPersonTable = ({filter, persons, removePerson}) => {\n  return <PersonTable persons={persons.filter(({name, number}) => name.toUpperCase().includes(filter.toUpperCase()))}\n  removePerson={removePerson} />\n}\n\nexport default FilteredPersonTable","import React from 'react'\n\nconst AddPersonForm = ({nameGet, nameSet, numberGet, numberSet, addName}) => {\n    return (\n        <form onSubmit={addName}>\n        <div>\n          name: <input value={nameGet} onChange={event => nameSet(event.target.value)} />\n        </div>\n        <div>\n          number: <input value={numberGet} onChange={event => numberSet(event.target.value)} /></div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default AddPersonForm","import React from 'react'\n\nconst FilterFragment = ({currentFilter, setFilter}) => {\n  return (\n    <div>\n      Show only those matching: <input value={currentFilter} onChange={event => setFilter(event.target.value)} />\n    </div>\n  )\n}\n\nexport default FilterFragment","import Axios from 'axios';\nconst baseURL = \"/api/persons\"\n\nconst getAll = () => {\n    return Axios.get(baseURL).then(response => response.data);\n}\n\nconst create = newPerson => {\n    return Axios.post(baseURL, newPerson).then(response => response.data);\n}\n\nconst update = (id, newPerson) => {\n    return Axios.put(`${baseURL}/${id}`, newPerson).then(response => response.data)\n}\n\nconst deleteEntry = id => {\n    return Axios.delete(`${baseURL}/${id}`).then(response => response.data)\n}\n\n\nexport default {\n    getAll,\n    create,\n    update,\n    deleteEntry\n}","import React from 'react';\n\nconst Notification = ({text, type}) => {\n\n    if (type == undefined) {\n        return null;\n    } else {\n        return (\n            <div className={type} id=\"top-notification\">\n                {text}\n            </div>\n        )\n    }\n\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport FilteredPersonTable from './components/FilteredPersonTable';\nimport AddPersonForm from './components/AddPersonForm';\nimport FilterFragment from './components/FilterFragment';\nimport API from './services/Phonebook'\nimport Notification from './components/Notification'\n\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [currentFilter, setFilter] = useState('')\n  const [notification, setNotification] = useState({ text: \"\", type: undefined })\n\n  const loadFromDatabase = () => {\n    API.getAll().then(receivedPersons => setPersons(receivedPersons))\n  }\n\n  useEffect(loadFromDatabase, [])\n\n  const addName = (event) => {\n    event.preventDefault();\n\n    if (persons.some(person => person.name.toUpperCase() === newName.toUpperCase())) {\n      // Person already exists, updating number\n      const update = window.confirm(`${newName} already exists, update number?`);\n      if (!update) return;\n\n      const newPerson = { ...getPersonByName(newName), number: newNumber };\n      console.log(newPerson)\n      setPersons(persons.map(p => p.id !== newPerson.id ? p : newPerson))\n      API.update(newPerson.id, newPerson)\n        .then(() => notify(`Updated number of ${newName}`, \"success\"))\n        .catch(() => {\n          notify(`${newPerson.name} has already been removed`, \"error\");\n          loadFromDatabase();\n        });\n    } else {\n      // Person doesn't exist, creating new\n      const newPerson = { name: newName, number: newNumber, id: persons.length + 1 }\n      API.create(newPerson)\n        .then(() => notify(`Added ${newName}`, \"success\"));\n      setPersons(persons.concat([newPerson]))\n    }\n  }\n\n  const notify = (text, type) => {\n    setNotification({ text, type })\n    console.log(notification)\n    setTimeout(() => setNotification({}), 3000)\n  }\n\n  const getPersonById = id => {\n    return persons.find(p => p.id === id);\n  }\n\n  const getPersonByName = name => {\n    console.log(\"asked for\", name);\n    const result = persons.find(p => p.name.toUpperCase() === name.toUpperCase());\n    console.log(\"found\", result);\n    return result;\n  }\n\n  const removePerson = id => {\n    const personToRemove = getPersonById(id);\n    const confirmed = window.confirm(`Are you sure you want to remove ${personToRemove.name}?`)\n    if (!confirmed) return;\n\n    setPersons(persons.filter(p => p.id !== id));\n    API.deleteEntry(id)\n      .then(() => notify(`Removed ${personToRemove.name}`, \"success\"))\n      .catch(() => {\n        notify(`${personToRemove.name} has already been removed`, \"error\");\n        loadFromDatabase();\n      })\n  }\n\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification text={notification.text} type={notification.type} />\n      <FilterFragment currentFilter={currentFilter} setFilter={setFilter} />\n      <h2>Add a new entry</h2>\n      <AddPersonForm nameGet={newName} nameSet={setNewName}\n        numberGet={newNumber} numberSet={setNewNumber}\n        addName={addName} />\n      <h2>Numbers</h2>\n      <FilteredPersonTable filter={currentFilter} persons={persons} removePerson={removePerson} />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}